name: Arweave Name Token

on: [push, workflow_dispatch]

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Check out repository code

      - name: Setup Lua
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: '5.3' # Specify the Lua version you need

      - name: Setup LuaRocks

        uses: leafo/gh-actions-luarocks@v4.3.0

      - name: Install Busted
        run: luarocks install ar-io-ao-0.1-1.rockspec

      - name: Run Busted Tests
        run: busted .

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # TODO: add ar-io-sdk e2e tests against lua code to be bundled on changes (e.g. create a new ant, publish it and validate it works with the sdk)

  integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4.0.2
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'

      - run: yarn --frozen-lockfile
      - run: yarn aos:build
      - run: yarn test

  publish:
    runs-on: ubuntu-latest
    environment: main
    needs: [unit, integration]
    permissions:
      contents: write # to be able to publish a GitHub release
    outputs:
      published_lua_code_id: ${{ steps.publish-lua-code.outputs.srcTxId }}
      # lua_code: ${{ steps.publish-lua-code.outputs.luaSourceCode }}
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4.0.2
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      - run: yarn --frozen-lockfile
      - name: Publish Lua Code
        id: publish-lua-code
        env:
          WALLET: ${{ secrets.WALLET }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          # Run the publish command once and store the output in a variable
          PUBLISH_OUTPUT=$(yarn aos:publish 2>&1)

          # Extract the source transaction ID and Lua source code from the stored output
          LUA_SOURCE_CODE_TX_ID=$(echo "$PUBLISH_OUTPUT" | grep -oE "publishedLuaTxId\.[a-zA-Z0-9_-]{43}" | cut -d'.' -f2)
          # LUA_SOURCE_CODE=$(echo "$PUBLISH_OUTPUT" | grep -oP 'luaSourceCode{{{\K.*(?=}}})')

          # Set the output variables for the workflow step
          echo "::set-output name=srcTxId::$LUA_SOURCE_CODE_TX_ID"
          # echo "::set-output name=luaSourceCode::$LUA_SOURCE_CODE"

      - name: Create Tag for Lua ID
        run: |
          git tag "${{ steps.publish-lua-code.outputs.srcTxId }}"
          git push --tags

  # release:
  #   needs: publish
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ needs.publish.outputs.published_lua_code_id }}
  #         release_name: Release ${{ needs.publish.outputs.published_lua_code_id }}
  #         body: |
  #           Release for AOS bundled Lua code
  #         draft: false
  #         prerelease: false
  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: aos-bundled-lua
  #         path: ${{ needs.publish.outputs.lua_code }}
  notify:
    runs-on: ubuntu-latest
    needs: [unit, integration, publish]
    if: always()
    steps:
      - name: Notify Slack on Success
        if: github.ref == 'refs/heads/main' && needs.unit.result == 'success' && needs.integration.result == 'success' && (needs.publish.result == 'success' || needs.publish.result == 'skipped')
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Unit Tests: ${{ needs.unit.result }}
            Integration Tests: ${{ needs.integration.result }}
            Published Lua Id: ${{ needs.publish.outputs.published_lua_code_id}}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Unit Tests: ${{ needs.unit.result }}
            Integration Tests: ${{ needs.integration.result }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
